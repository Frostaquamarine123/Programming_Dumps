Deplyr-Package - package used for data manipulation  - to install deplyr package use install.package('deplyr')
example -
library(deplyr)
library(nycflights13)
to know the header of the table - head(tablename/dataframe)
to know the summary of the table - summary(tablename/dataframe)
functions with deplyr -

head(filter(flights,month==11,day==2,carrier=='DL'))
# A tibble: 6 x 19
   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight tailnum origin dest  air_time
  <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl> <chr>    <int> <chr>   <chr>  <chr>    <dbl>
1  2013    11     2      549            600       -11      726            748       -22 DL         731 N332NB  LGA    DTW         79
2  2013    11     2      557            610       -13      746            809       -23 DL        1919 N908DE  LGA    MSP        143
3  2013    11     2      558            600        -2      819            828        -9 DL         563 N911DE  LGA    ATL        119
4  2013    11     2      625            630        -5      849            851        -2 DL         575 N357NB  EWR    ATL        115
5  2013    11     2      628            630        -2      835            901       -26 DL         479 N3765   JFK    ATL        105
6  2013    11     2      637            640        -3      906            905         1 DL        1843 N688DL  JFK    ATL        115

without deplyr package , using bracket notataion 

head(flights[flights$month == 11 & flights$day == 3 & flights$carrier == 'DL', ])
year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight tailnum origin dest  air_time
  <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl> <chr>    <int> <chr>   <chr>  <chr>    <dbl>
1  2013    11     3      555            600        -5      754            828       -34 DL        1377 N358NB  LGA    ATL        103
2  2013    11     3      603           1645       798      829           1913       796 DL        2042 N990AT  EWR    ATL        109
3  2013    11     3      621            630        -9      905            905         0 DL         479 N917DL  JFK    ATL        111
4  2013    11     3      653            655        -2     1143           1150        -7 DL         315 N3731T  JFK    SJU        200
5  2013    11     3      653            700        -7     1031           1023         8 DL         472 N192DN  JFK    LAX        354
6  2013    11     3      655            700        -5      923            951       -28 DL        2285 N362NW  LGA    MCO        133
# ... with 4 more variables: distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>
> 

Slice() - returns returns rows by position given 
example - slice(flights,1:10)
 slice(flights,1:10)
# A tibble: 10 x 19
    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight tailnum origin dest  air_time
   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl> <chr>    <int> <chr>   <chr>  <chr>    <dbl>
 1  2013     1     1      517            515         2      830            819        11 UA        1545 N14228  EWR    IAH        227
 2  2013     1     1      533            529         4      850            830        20 UA        1714 N24211  LGA    IAH        227
 3  2013     1     1      542            540         2      923            850        33 AA        1141 N619AA  JFK    MIA        160
 4  2013     1     1      544            545        -1     1004           1022       -18 B6         725 N804JB  JFK    BQN        183
 5  2013     1     1      554            600        -6      812            837       -25 DL         461 N668DN  LGA    ATL        116
 6  2013     1     1      554            558        -4      740            728        12 UA        1696 N39463  EWR    ORD        150
 7  2013     1     1      555            600        -5      913            854        19 B6         507 N516JB  EWR    FLL        158
 8  2013     1     1      557            600        -3      709            723       -14 EV        5708 N829AS  LGA    IAD         53
 9  2013     1     1      557            600        -3      838            846        -8 B6          79 N593JB  JFK    MCO        140
10  2013     1     1      558            600        -2      753            745         8 AA         301 N3ALAA  LGA    ORD        138

arrange() - reorders the row  and returns it , the result will  be dependent on each row given to be arranged 
example -
head(arrange(flights,year,month,day,air_time))
# A tibble: 6 x 19
   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight tailnum origin dest  air_time
  <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl> <chr>    <int> <chr>   <chr>  <chr>    <dbl>
1  2013     1     1     2302           2200        62     2342           2253        49 EV        4276 N13903  EWR    BDL         24
2  2013     1     1     1318           1322        -4     1358           1416       -18 EV        4106 N19554  EWR    BDL         25
3  2013     1     1     2116           2110         6     2202           2212       -10 EV        4404 N15912  EWR    PVD         28
4  2013     1     1     2000           2000         0     2054           2110       -16 9E        3664 N836AY  JFK    PHL         30
5  2013     1     1     2056           2004        52     2156           2112        44 EV        4170 N12540  EWR    ALB         31
6  2013     1     1      908            915        -7     1004           1033       -29 US        1467 N959UW  LGA    PHL         32
# ... with 4 more variables: distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>

Notice that the rows are arranged in ascending order 

in order to do descending , just put desc before the row you want to do descending 
head(arrange(flights,day,month,day,desc(air_time)))
# A tibble: 6 x 19
   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight tailnum origin dest  air_time
  <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl> <chr>    <int> <chr>   <chr>  <chr>    <dbl>
1  2013     1     1      857            900        -3     1516           1530       -14 HA          51 N380HA  JFK    HNL        659
2  2013     1     1     1344           1344         0     2005           1944        21 UA          15 N76065  EWR    HNL        656
3  2013     1     1     1029           1030        -1     1427           1355        32 AA         179 N325AA  JFK    SFO        389
4  2013     1     1      702            700         2     1058           1014        44 B6         671 N779JB  JFK    LAX        381
5  2013     1     1      646            645         1     1023           1030        -7 UA        1496 N38727  EWR    SNA        380
6  2013     1     1      745            745         0     1135           1125        10 AA          59 N336AA  JFK    SFO        378
# ... with 4 more variables: distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>
select - select functions allows the user to select a specified data that the user wants to view
example 
head(select(flights,arr_time,carrier))
# A tibble: 6 x 2
  arr_time carrier
     <int> <chr>  
1      830 UA     
2      850 UA     
3      923 AA     
4     1004 B6     
5      812 DL     
6      740 UA    
rename - rename function allows the user to quickly rename column 
example - 
 head(rename(flights,airline_carrier = carrier))
# A tibble: 6 x 19
   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay airline_carrier flight tailnum origin dest 
  <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl> <chr>            <int> <chr>   <chr>  <chr>
1  2013     1     1      517            515         2      830            819        11 UA                1545 N14228  EWR    IAH  
2  2013     1     1      533            529         4      850            830        20 UA                1714 N24211  LGA    IAH  
3  2013     1     1      542            540         2      923            850        33 AA                1141 N619AA  JFK    MIA  
4  2013     1     1      544            545        -1     1004           1022       -18 B6                 725 N804JB  JFK    BQN  
5  2013     1     1      554            600        -6      812            837       -25 DL                 461 N668DN  LGA    ATL  
6  2013     1     1      554            558        -4      740            728        12 UA                1696 N39463  EWR    ORD  

distinct - distinct functions used to find distinct column name 
example -
distinct(select(flights,carrier))
# A tibble: 16 x 1
   carrier
   <chr>  
 1 UA     
 2 AA     
 3 B6     
 4 DL     
 5 EV     
 6 MQ     
 7 US     
 8 WN     
 9 VX     
10 FL     
11 AS     
12 9E     
13 F9     
14 HA     
15 YV     
16 OO 
mutate - this function will add a new column based on the functions which were written  for the function 
head(mutate(flights,takeoff_time = dep_time-arr_time))
# A tibble: 6 x 20
   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight tailnum origin dest  air_time
  <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl> <chr>    <int> <chr>   <chr>  <chr>    <dbl>
1  2013     1     1      517            515         2      830            819        11 UA        1545 N14228  EWR    IAH        227
2  2013     1     1      533            529         4      850            830        20 UA        1714 N24211  LGA    IAH        227
3  2013     1     1      542            540         2      923            850        33 AA        1141 N619AA  JFK    MIA        160
4  2013     1     1      544            545        -1     1004           1022       -18 B6         725 N804JB  JFK    BQN        183
5  2013     1     1      554            600        -6      812            837       -25 DL         461 N668DN  LGA    ATL        116
6  2013     1     1      554            558        -4      740            728        12 UA        1696 N39463  EWR    ORD        150
# ... with 5 more variables: distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>, takeoff_time <int>
transmutate - this function will return a new coulmn based on the functions which were written for the function
> head(transmute(flights,takeoff_time = dep_time-arr_time))
# A tibble: 6 x 1
  takeoff_time
         <int>
1         -313
2         -317
3         -381
4         -460
5         -258
6         -186
summarize - this function will summarize the whole table and give one value in return , note - you will get only one row back 
example - 
summarise(flights,avg_air_time = mean(air_time,na.rm = TRUE))
# A tibble: 1 x 1
  avg_air_time
         <dbl>
1         151.

sample_n() - returns the sample of no of rows you want to view 
example -
sample_n(flights,10)
# A tibble: 10 x 19
    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight tailnum origin dest  air_time
   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl> <chr>    <int> <chr>   <chr>  <chr>    <dbl>
 1  2013     7    16      641            645        -4      823            835       -12 MQ        3599 N525MQ  LGA    MSP        145
 2  2013    10    30     1657           1655         2     1820           1820         0 WN        2988 N436WN  LGA    MDW        118
 3  2013     8    21     1030           1030         0     1219           1243       -24 EV        5806 N12163  EWR    OMA        146
 4  2013     1    10     1456           1457        -1     1815           1823        -8 UA        1642 N37255  EWR    SFO        355
 5  2013    12    21      718            710         8     1015           1025       -10 AA        2279 N3FHAA  LGA    MIA        155
 6  2013    10    19     1050           1055        -5     1344           1354       -10 DL        1275 N391DA  JFK    SLC        276
 7  2013    10    18     2132           2140        -8     2238           2255       -17 MQ        3621 N725MQ  JFK    DCA         44
 8  2013     2    24     1822           1829        -7     2034           2032         2 US        1973 N179UW  EWR    CLT         84
 9  2013     5    16     1155           1159        -4     1418           1427        -9 EV        4666 N16911  EWR    JAX        118
10  2013     5     8     2127           2055        32     2256           2230        26 AA         371 N4YBAA  LGA    ORD        106
# ... with 4 more variables: distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>
sample_frac() - returns the sample of %tage of row we want 
example -
sample_frac(flights,0.1)
sample_frac(flights,0.1)
# A tibble: 33,678 x 19
    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight tailnum origin dest  air_time
   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl> <chr>    <int> <chr>   <chr>  <chr>    <dbl>
 1  2013    12    11     1753           1800        -7     1914           1919        -5 US        2191 N752US  LGA    DCA         56
 2  2013     1    16     2000           2000         0     2256           2312       -16 B6         801 N519JB  JFK    FLL        156
 3  2013     8    11      910            905         5     1207           1225       -18 DL         874 N370NB  LGA    MIA        147
 4  2013     2    21     1125           1115        10     1446           1425        21 AA        2099 N3DDAA  LGA    MIA        154
 5  2013     2    20     1716           1721        -5     2035           2020        15 UA        1705 N19130  EWR    IAH        235
 6  2013    10    28      626            630        -4      838            839        -1 EV        4393 N13964  EWR    IND         98
 7  2013     4     4     1641           1648        -7     1745           1806       -21 EV        4255 N14977  EWR    ROC         44
 8  2013     8    29     1158           1156         2     1422           1441       -19 UA        1519 N41140  EWR    MCO        125
 9  2013    10     1      759            755         4      940            935         5 MQ        3363 N816MQ  JFK    RDU         62
10  2013     6    25      830            756        34     1107           1044        23 UA        1627 N12218  EWR    PBI        133
# ... with 33,668 more rows, and 4 more variables: distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>

%>% operator  - it is used to nest two or more functions together 

without %>% operator 

Script 
library(dplyr)

df <- mtcars

result <- arrange(sample_n(filter(df,mpg>20),size = 5),desc(mpg))

print(result)

Output 
  mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
Mazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4

                       OR

library(dplyr)

df <- mtcars

 #result <- arrange(sample_n(filter(df,mpg>20),size = 5),desc(mpg))

a < - filter(df,mpg>20)
b < - sample_n(a,size = 5)
c <- arrange(b,desc(mpg))
print(c)

                        mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
Mazda RX4      FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
Mazda RX4 Wag  FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
Datsun 710     FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
Hornet 4 Drive FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
Merc 240D      FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
Merc 230       FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
Fiat 128       FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
Honda Civic    FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
Toyota Corolla FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
Toyota Corona  FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
Fiat X1-9      FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
Porsche 914-2  FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
Lotus Europa   FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
Volvo 142E     FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE

